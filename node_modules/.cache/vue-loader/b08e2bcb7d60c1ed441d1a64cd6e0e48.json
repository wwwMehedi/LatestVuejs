{"remainingRequest":"F:\\xamp\\htdocs\\vrentstep\\copyvrent6\\vlogin2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\xamp\\htdocs\\vrentstep\\copyvrent6\\vlogin2\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\xamp\\htdocs\\vrentstep\\copyvrent6\\vlogin2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\xamp\\htdocs\\vrentstep\\copyvrent6\\vlogin2\\src\\views\\Listspace.vue?vue&type=template&id=6eb2e65e&scoped=true&","dependencies":[{"path":"F:\\xamp\\htdocs\\vrentstep\\copyvrent6\\vlogin2\\src\\views\\Listspace.vue","mtime":1639306236233},{"path":"F:\\xamp\\htdocs\\vrentstep\\copyvrent6\\vlogin2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\xamp\\htdocs\\vrentstep\\copyvrent6\\vlogin2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\xamp\\htdocs\\vrentstep\\copyvrent6\\vlogin2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\xamp\\htdocs\\vrentstep\\copyvrent6\\vlogin2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}